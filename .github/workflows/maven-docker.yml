# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Dev CI-CD

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
       username: ${{ secrets.DOCKER_USERNAME }}
       password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/kafka-producer:latest
  continuous-deplyment:
      runs-on: ubuntu-latest
      needs: build 
      steps:
        - name: Deploying to Cropdata Dell Server
          uses: appleboy/ssh-action@master # An action made to control Linux servers
          with: # We set all our secrets here for the action, these won't be shown in the action logs
            host: ${{ secrets.HOST }}
            username: ${{ secrets.SERVER_USERNAME }}
            password: ${{ secrets.SERVER_PASSWORD }}
            script: |
              docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
              docker pull ${{ secrets.DOCKER_USERNAME }}/kafka-producer:latest
              docker run -d -p 9003:9003 --restart=always --name kafkaproducer -e port=9003 -e bootstrap-address=${{ secrets.BOOTSTRAP_ADDRESS }}:39092 ${{ secrets.DOCKER_USERNAME }}/kafka-producer:latest
              docker system prune -f
              echo "Done..."
